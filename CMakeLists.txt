PROJECT(Memcached)
CMAKE_MINIMUM_REQUIRED(VERSION 2.8)

IF (${CMAKE_MAJOR_VERSION} GREATER 2)
    CMAKE_POLICY(SET CMP0042 NEW)
ENDIF (${CMAKE_MAJOR_VERSION} GREATER 2)

INCLUDE(CheckCSourceCompiles)
INCLUDE(CheckIncludeFiles)
INCLUDE(CheckIncludeFileCXX)
INCLUDE(CTest)

# The test program expects to find the output files in
# the root directory (that's how we built them earlier)
# let's continue to find them there until it's all done
# Unfortunately this means I need to add WORKING_DIRECTORY
# to ADD_TEST in order for it to correctly find the binary..
# (Please note that these settings only affect the BUILD
# directory structure, and not the installed directory
# structure
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR})
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR})
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR})

IF (EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/.git)
   EXECUTE_PROCESS(COMMAND git log -1 --pretty=format:%H
                   WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
                   OUTPUT_VARIABLE MEMCACHED_VERSION
                   ERROR_QUIET
                   OUTPUT_STRIP_TRAILING_WHITESPACE)
ELSE (EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/.git)
   SET(MEMCACHED_VERSION "unknown")
ENDIF (EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/.git)

CHECK_SYMBOL_EXISTS(memalign malloc.h HAVE_MEMALIGN)

IF (ENABLE_DTRACE)
   ADD_DEFINITIONS(-DENABLE_DTRACE=1)
ENDIF (ENABLE_DTRACE)

ADD_CUSTOM_COMMAND(OUTPUT ${Memcached_BINARY_DIR}/memcached_dtrace.h
                   COMMAND
                     ${DTRACE} -h
                               -s ${Memcached_SOURCE_DIR}/memcached_dtrace.d
                               -o ${Memcached_BINARY_DIR}/memcached_dtrace.h
                   DEPENDS
                         memcached_dtrace.d
                   COMMENT "Generating DTrace probe header file"
                   VERBATIM)
ADD_CUSTOM_TARGET(generate_memcached_dtrace_h
                  DEPENDS ${Memcached_BINARY_DIR}/memcached_dtrace.h)

INCLUDE_DIRECTORIES(BEFORE
                    ${LIBEVENT_INCLUDE_DIR}
                    ${SNAPPY_INCLUDE_DIR}
                    ${OPENSSL_INCLUDE_DIR}
                    ${CMAKE_INSTALL_PREFIX}/include
                    ${CMAKE_CURRENT_SOURCE_DIR}/include
                    ${CMAKE_CURRENT_BINARY_DIR}
                    ${CMAKE_CURRENT_SOURCE_DIR}
                    ${Platform_SOURCE_DIR}/include
                    ${subjson_SOURCE_DIR})

INCLUDE_DIRECTORIES(AFTER
                    ${gtest_SOURCE_DIR}/include)

IF (MEMORY_ALLOCATOR)
   INCLUDE_DIRECTORIES(AFTER ${MALLOC_INCLUDE_DIR})
ELSE (MEMORY_ALLOCATOR)
   SET(MALLOC_LIBRARIES "")
ENDIF (MEMORY_ALLOCATOR)

FUNCTION(APPEND_MALLOC_LINKER_FLAGS _target)
   IF (("${COUCHBASE_MEMORY_ALLOCATOR}" STREQUAL "tcmalloc") AND WIN32)
      SET(__ldflag "/INCLUDE:__tcmalloc")
      GET_TARGET_PROPERTY(__existing_ldflags ${_target} LINK_FLAG)
      IF (__existing_ldflags)
         SET(__ldflags "${__existing_ldflags} ${__ldflags}")
      ENDIF (__existing_ldflags)
      SET_TARGET_PROPERTIES(memcached PROPERTIES LINK_FLAG "${__memcached_ldflags}")
   ENDIF (("${COUCHBASE_MEMORY_ALLOCATOR}" STREQUAL "tcmalloc") AND WIN32)
ENDFUNCTION()

IF (BREAKPAD_FOUND)
   ADD_DEFINITIONS(-DHAVE_BREAKPAD)
   INCLUDE_DIRECTORIES(AFTER ${BREAKPAD_INCLUDE_DIR})
   IF (UNIX)
      # On Linux Breakpad unit test relies on examining the minidump -> core
      # file with GDB.
      FIND_PROGRAM(GDB_EXECUTABLE gdb)
      IF (GDB_EXECUTABLE)
         ADD_TEST(memcached-breakpad-test ${PYTHON_EXECUTABLE}
                  ${Memcached_SOURCE_DIR}/tests/breakpad_test.py
                  ${Memcached_BINARY_DIR}/memcached ${MINIDUMP2CORE} ${GDB_EXECUTABLE})
      ELSE (GDB_EXECUTABLE)
         MESSAGE(STATUS "GDB not available, skipping breakpad test")
      ENDIF (GDB_EXECUTABLE)

   ELSEIF (WIN32)
      # On Windows the test doesn't use minidump-2-core or GDB.
      ADD_TEST(breakpad-test
               ${PYTHON_EXECUTABLE} ${Memcached_SOURCE_DIR}/tests/breakpad_test.py
               ${Memcached_BINARY_DIR}/memcached)
   ENDIF (UNIX)
ENDIF (BREAKPAD_FOUND)


IF (MEMORY_ALLOCATOR STREQUAL jemalloc OR MEMORY_ALLOCATOR STREQUAL tcmalloc OR MEMORY_ALLOCATOR STREQUAL badmalloc)
  LIST(APPEND MEMORY_TRACKING_SRCS
       ${Memcached_SOURCE_DIR}/daemon/alloc_hooks_${MEMORY_ALLOCATOR}.cc)
ELSE()
  LIST(APPEND MEMORY_TRACKING_SRCS
       ${Memcached_SOURCE_DIR}/daemon/alloc_hooks_dummy.cc)
ENDIF()

LIST(APPEND MEMORY_TRACKING_SRCS ${Memcached_SOURCE_DIR}/daemon/alloc_hooks.h)

IF (APPLE)
  LIST(APPEND MEMORY_TRACKING_SRCS
    ${Memcached_SOURCE_DIR}/daemon/darwin_zone.c
    ${Memcached_SOURCE_DIR}/daemon/darwin_zone.h)
ENDIF (APPLE)

IF (WIN32)
   INCLUDE_DIRECTORIES(AFTER ${Platform_SOURCE_DIR}/include/win32)
ENDIF (WIN32)

# We're using all of the sources to build up the server from one of
# the unit tests so let's just stash them in a variable
LIST(APPEND CBSASL_SOURCES
  ${Memcached_SOURCE_DIR}/include/cbsasl/cbsasl.h
  ${Memcached_SOURCE_DIR}/include/cbsasl/visibility.h
  ${Memcached_SOURCE_DIR}/cbsasl/client.c
  ${Memcached_SOURCE_DIR}/cbsasl/common.c
  ${Memcached_SOURCE_DIR}/cbsasl/cram-md5/cram-md5.c
  ${Memcached_SOURCE_DIR}/cbsasl/cram-md5/cram-md5.h
  ${Memcached_SOURCE_DIR}/cbsasl/cram-md5/hmac.c
  ${Memcached_SOURCE_DIR}/cbsasl/cram-md5/hmac.h
  ${Memcached_SOURCE_DIR}/cbsasl/cram-md5/md5.c
  ${Memcached_SOURCE_DIR}/cbsasl/cram-md5/md5.h
  ${Memcached_SOURCE_DIR}/cbsasl/hash.c
  ${Memcached_SOURCE_DIR}/cbsasl/hash.h
  ${Memcached_SOURCE_DIR}/cbsasl/plain/plain.c
  ${Memcached_SOURCE_DIR}/cbsasl/plain/plain.h
  ${Memcached_SOURCE_DIR}/cbsasl/pwfile.cc
  ${Memcached_SOURCE_DIR}/cbsasl/pwfile.h
  ${Memcached_SOURCE_DIR}/cbsasl/server.c
  ${Memcached_SOURCE_DIR}/cbsasl/strcmp.c
  ${Memcached_SOURCE_DIR}/cbsasl/util.h)

ADD_SUBDIRECTORY(etc)
ADD_SUBDIRECTORY(cbsasl)
ADD_SUBDIRECTORY(time)
ADD_SUBDIRECTORY(support-files)
ADD_SUBDIRECTORY(programs)
ADD_SUBDIRECTORY(utilities)
ADD_SUBDIRECTORY(engines)
ADD_SUBDIRECTORY(extensions)
ADD_SUBDIRECTORY(testsuite)
ADD_SUBDIRECTORY(auditd)
ADD_SUBDIRECTORY(daemon)

IF (INSTALL_HEADER_FILES)
   INSTALL (FILES include/memcached/allocator_hooks.h
                  include/memcached/callback.h
                  include/memcached/config_parser.h
                  include/memcached/engine.h
                  include/memcached/engine_common.h
                  include/memcached/engine_testapp.h
                  include/memcached/extension.h
                  include/memcached/extension_loggers.h
                  include/memcached/protocol_binary.h
                  include/memcached/server_api.h
                  include/memcached/types.h
                  include/memcached/dcp.h
                  include/memcached/util.h
                  include/memcached/vbucket.h
                  include/memcached/visibility.h
            DESTINATION include/memcached)

   INSTALL(FILES
           include/cbsasl/cbsasl.h
           include/cbsasl/visibility.h
           DESTINATION include/cbsasl)
ENDIF(INSTALL_HEADER_FILES)

INSTALL(FILES daemon/rbac.json DESTINATION etc/security)

CONFIGURE_FILE(tests/cert/testapp.pem tests/cert/testapp.pem COPYONLY)
CONFIGURE_FILE(tests/cert/testapp.cert tests/cert/testapp.cert COPYONLY)
# Second copy to test changing at runtime
CONFIGURE_FILE(tests/cert/testapp.pem tests/cert/testapp2.pem COPYONLY)
CONFIGURE_FILE(tests/cert/testapp.cert tests/cert/testapp2.cert COPYONLY)

ADD_SUBDIRECTORY(tests)
ADD_SUBDIRECTORY(man)

ENABLE_CODE_COVERAGE_REPORT()

CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/config.h.in
               ${CMAKE_CURRENT_BINARY_DIR}/config.h)
